var Application = function (a, b, c) {
  this.params = {};
  this.params.userId = a;
  this.params.query = b;
  this.params.language = c;
  this.init();
};

Application.prototype = {
  init: function () {
      parseQueryParameters(this.params);
      $(".topnav ul li a").click(function (a) {});
  },
  queryString: function (a) {
      void 0 == a && (a = {});
      a = $.extend({}, this.params, a);
      var b = [],
          c;
      for (c in a) {
          var d = a[c];
          "" != d && b.push(c + "=" + encodeURIComponent(d));
      }
      return b.join("&");
  },
  params: {},
  results: {},
  forwardSearch: function (a, b, c) {
      if ("" !== a) {
          var d = "/solver/";
          if ("undefined" != typeof SOLUTIONS && "" !== SOLUTIONS.page) d += SOLUTIONS.page + "/";
          else {
              let e = window.location.pathname.split("/"),
                  f = "step-by-step";
              2 < e.length && "solver" === e[1] && "" !== e[2] && (f = e[2]);
              d += f + "/";
          }
          d += encodeURIComponent(a);
          b && (d += "?or=" + b);
          "3" !== sy_var || c ? (window.location = d) : symbolab_log("Registration", "ClickedFeature", "ClickSuggest");
      }
  },
};
Application.prototype.updateSolutionsUrl = function () {
  $("#solutionsTopNav a").attr("href", "/solver/step-by-step/" + encodeURIComponent(this.params.query));
};
Application.prototype.getTextLenScore = function (a) {
  return (parseInt(a.textlen) + parseInt(a.eqlen)) / 1e5;
};
Application.prototype.logRedirect = function (a, b, c, d) {
  a = {
      userId: this.params.userId,
      language: this.params.language,
      type: a,
      info1: b,
      info2: c,
      redirect: d,
  };
  $("body").append(
      $("<form/>", {
          id: "redirectPostForm",
          method: "POST",
          action: "/logRedirect",
      })
  );
  b = $("#redirectPostForm");
  for (var e in a) b.append($("<input/>", { type: "hidden", name: e, value: a[e] }));
  b.submit();
};
Application.prototype.showPopover = function (a, b, c) {
  var d = this;
  a.popover({
      title: b,
      content: c,
      placement: "top",
      delay: { show: 500, hide: 5e3 },
  }).popover("show");
  setInterval(function () {
      d.inputBox().popover("disable");
      d.inputBox().popover("hide");
  }, 4e3);
};
Application.prototype.lastInsertedIsEquals = function () {
  var a = this.inputValue("latex");
  return a.indexOf("=") == a.length - 1 ? 1 : 0;
};
Application.prototype.updateCalculation = function () {
  var a = this,
      b = a.inputValue("latex");
  a.calcmode || (a.calcmode = "rad");
  0 <= b.indexOf("=") && (b = b.split("=")[0]);
  KEYPAD.inputBox().mathquill("latex", b + " = ");
  $.ajax({
      type: "GET",
      url: Application.paths.calculate,
      data: { query: b, radDeg: a.calcmode },
      error: function (c) {
          a.showPopover(a.inputBox(), "Calculation Error", "We ran into a problem calculating that. Try searching instead.");
      },
      success: function (c) {
          void 0 != c.response && "NA" != c.response ? a.appendInput(c.response) : a.showPopover(a.inputBox(), "Calculation Error", "We ran into a problem calculating that. Try searching instead.");
      },
  });
};
Application.prototype.executeSearch = function () {
  var a = this.params.query;
  if ("" != a) {
      a = a.replace(/\\(text|mbox)\s*{(.+?)}/g, "$2 ");
      a = a.replace(/\\:/g, " ");
      a = a.replace(/\\left\\s*\(/g, "(");
      var b = (a = a.replace(/\\right\\s*\)/g, ")"));
      this.params.query = a;
      "" == a
          ? (this.promptError("Cannot understand this query, please try a different query."), this.inputBox().mathquill("latex", prepareQueryForMathQuill(b)))
          : 0 == this.currentPage() || 100 < this.currentPage()
          ? this.promptError("Allowed page numbers are 1-100.")
          : (this.inputBox().mathquill("latex", prepareQueryForMathQuill(a)), $(".print-only .search-query").mathquill("latex", a), this.updateSolutionsUrl(), this.updateResults(), this.isScholar || this.updateStepsPlot());
  }
};
Application.prototype.promptError = function (a) {
  this.clearResults();
  document.title = "Error - Application Results";
  $("#ShareButtonsSection").prepend("<span class='errorMsg'>" + a + "</span>");
  $("#Refinements .scholar-refinements, #Refinements .web-refinements").hide();
  $("#Codepad .actions").hide();
};
Application.convert2html = function (a) {
  a = a.replace(/</g, "&lt;");
  return (a = a.replace(/>/g, "&gt;"));
};
function url_domain(a) {
  var b = document.createElement("a");
  b.href = a;
  return b.hostname;
}
function htmlDecode(a) {
  if ("" == a) return a;
  var b = document.createElement("div");
  b.innerHTML = a;
  return b.childNodes[0].nodeValue;
}
Application_toolbar_functions = {
  Basic: {
      prepend: function (a, b) {
          KEYPAD.prependInput(b.data("prepend"), b.data("moveleft"));
      },
      append: function (a, b) {
          KEYPAD.appendInput(b.data("append"), b.data("moveleft"));
      },
      clear: function () {
          KEYPAD.inputBox(!1).mathquill("latex", "");
      },
  },
  Calc: {
      mode: function (a, b) {
          void 0 == KEYPAD.calcmode && (KEYPAD.calcmode = "rad");
          "deg" == symbolab.calcmode ? (b.addClass("radmode"), (KEYPAD.calcmode = "rad")) : (b.removeClass("radmode"), (KEYPAD.calcmode = "deg"));
      },
      calculate: function (a, b) {
          KEYPAD.updateCalculation();
      },
      "x!": function (a, b) {
          KEYPAD.appendInput("!");
      },
  },
};
var ApplicationPad = function (a, b, c, d) {
  this.language = a;
  this.customInputboxSelector = b;
  this.allowsSearching = c;
  void 0 === d && (d = !1);
  this.triggerOnKeyUpEvents = d;
  this.periodicTable = [
      ["H", , , , "\\Rightarrow", "O_{\\msquare}", , , , , , , , , , , , "He"],
      ["Li", "Be", , , , , , , , , , , "B", "C", "N", "O", "F", "Ne"],
      ["Na", "Mg", , , , , , , , , , , "Al", "Si", "P", "S", "Cl", "Ar"],
      "K Ca Sc Ti V Cr Mn Fe Co Ni Cu Zn Ga Ge As Se Br Kr".split(" "),
      "Rb Sr Y Zr Nb Mo Tc Ru Rh Pd Ag Cd In Sn Sb Te I Xe".split(" "),
      ["Cs", "Ba", , "Hf", "Ta", "W", "Re", "Os", "Ir", "Pt", "Au", "Hg", "Tl", "Pb", "Bi", "Po", "At", "Rn"],
      ["Fr", "Ra", , "Rf", "Db", "Sg", "Bh", "Hs", "Mt", "Ds", "Rg", "Cn", "Uut", "Fl", "Uup", "Lv", "Uus", "Uuo"],
      [, , , , , , , , , , , , , , , , ,],
      [, , "La", "Ce", "Pr", "Nd", "Pm", "Sm", "Eu", "Gd", "Tb", "Dy", "Ho", "Er", "Tm", "Yb", "Lu"],
      [, , "Ac", "Th", "Pa", "U", "Np", "Pu", "Am", "Cm", "Bk", "Cf", "Es", "Fm", "Md", "No", "Lr"],
  ];
  this.elementNames = {
      "\\Rightarrow": "Right arrow",
      "O_{\\msquare}": "Underscore",
      H: "Hydrogen",
      He: "Helium",
      Li: "Lithium",
      Be: "Beryllium",
      B: "Boron",
      C: "Carbon",
      N: "Nitrogen",
      O: "Oxygen",
      F: "Fluorine",
      Ne: "Neon",
      Na: "Sodium",
      Mg: "Magnesium",
      Al: "Aluminum",
      Si: "Silicon",
      P: "Phosphorus",
      S: "Sulfur",
      Cl: "Chlorine",
      Ar: "Argon",
      K: "Potassium",
      Ca: "Calcium",
      Sc: "Scandium",
      Ti: "Titanium",
      V: "Vanadium",
      Cr: "Chromium",
      Mn: "Manganese",
      Fe: "Iron",
      Co: "Cobalt",
      Ni: "Nickel",
      Cu: "Copper",
      Zn: "Zinc",
      Ga: "Gallium",
      Ge: "Germanium",
      As: "Arsenic",
      Se: "Selenium",
      Br: "Bromine",
      Kr: "Krypton",
      Rb: "Rubidium",
      Sr: "Strontium",
      Y: "Yttrium",
      Zr: "Zirconium",
      Nb: "Niobium",
      Mo: "Molybdenum",
      Tc: "Technetium",
      Ru: "Ruthenium",
      Rh: "Rhodium",
      Pd: "Palladium",
      Ag: "Silver",
      Cd: "Cadmium",
      In: "Indium",
      Sn: "Tin",
      Sb: "Antimony",
      Te: "Tellurium",
      I: "Iodine",
      Xe: "Xenon",
      Cs: "Caesium",
      Ba: "Barium",
      Hf: "Hafnium",
      Ta: "Tantalum",
      W: "Tungsten",
      Re: "Rhenium",
      Os: "Osmium",
      Ir: "Iridium",
      Pt: "Platinum",
      Au: "Gold",
      Hg: "Mercury",
      Tl: "Thallium",
      Pb: "Lead",
      Bi: "Bismuth",
      Po: "Polonium",
      At: "Astatine",
      Rn: "Radon",
      Fr: "Francium",
      Ra: "Radium",
      Rf: "Rutherfordium",
      Db: "Dubnium",
      Sg: "Seaborgium",
      Bh: "Bohrium",
      Hs: "Hassium",
      Mt: "Meitnerium",
      Ds: "Darmstadtium",
      Rg: "Roentgenium",
      Cn: "Copernicium",
      Uut: "Ununtrium",
      Fl: "Flerovium",
      Uup: "Ununpentium",
      Lv: "Livermorium",
      Uus: "Ununseptium",
      Uuo: "Ununoctium",
      La: "Lanthanum",
      Ce: "Cerium",
      Pr: "Praseodymium",
      Nd: "Neodymium",
      Pm: "Promethium",
      Sm: "Samarium",
      Eu: "Europium",
      Gd: "Gadolinium",
      Tb: "Terbium",
      Dy: "Dysprosium",
      Ho: "Holmium",
      Er: "Erbium",
      Tm: "Thulium",
      Yb: "Ytterbium",
      Lu: "Lutetium",
      Ac: "Actinium",
      Th: "Thorium",
      Pa: "Protactinium",
      U: "Uranium",
      Np: "Neptunium",
      Pu: "Plutonium",
      Am: "Americium",
      Cm: "Curium",
      Bk: "Berkelium",
      Cf: "Californium",
      Es: "Einsteinium",
      Fm: "Fermium",
      Md: "Mendelevium",
      No: "Nobelium",
      Lr: "Lawrencium",
  };
  this.init();
};
ApplicationPad.prototype = {
  init: function () {
      var a = this,
          b = $("body");
      b.click(function (c) {
          a.selectChild("#CodePadSuggestions").hide();
          $("#tsUl").hide();
      });
      this.selectChild("button.search").click(function (c) {
          a.initateSearch();
      });
      $("#main-input").keyup(function (c) {
          13 == c.keyCode && a.initateSearch();
      });
      b.on("click", '[class^="pad-toolbar-"]', function (c) {
          a.switchPad($(this));
          0 <= this.className.indexOf("chemistry") && a.createChemistryPad("#chemistryTable");
          c = $(this).attr("class").split(" ")[0].split("-")[2].capitalize();
          symbolab_log("Pad", "KeyboardType", c);
      });
      b.on("click", ".pad-button-matrix c", function (c) {
          c = $(this).mathquill("latex");
          c = c.replace("\\left(", "");
          c = c.replace("\\right)", "");
          var d = c.split("\\times"),
              e = createMatrixLatex(d[0], d[1]);
          a.inputBox(!1).mathquill("write", e, d[0] * d[1]);
          a.inputBox(!1).focus();
          symbolab_log("Pad", "Matrix", "matrix:" + c);
          return !1;
      });
      this.selectChild(".padButton").each(function (c, d) {
          c = $(d);
          d = c.attr("title");
          (void 0 !== d && null !== d && "" !== d) || c.attr("title", c.data("append"));
      });
      b.on("click", ".equalsBtn", function (c) {
          a.initateSearch();
      });
      b.on("click", ".radBtn", function (c) {
          $(".radBtn").addClass("active");
          $(".degBtn").removeClass("active");
      });
      b.on("click", ".degBtn", function (c) {
          $(".radBtn").removeClass("active");
          $(".degBtn").addClass("active");
      });
      b.on("click", ".clearBtn", function (c) {
          a.replaceInput("");
      });
      b.off("click", ".padButton:not(.disabled)").on("click", ".padButton:not(.disabled)", function (c) {
          a.padButtonClick(this);
      });
      $("#toggle_mini_keypad, .toggle_mini_keypad").click(function () {
          const c = $(this),
              d = c.find("img.open"),
              e = c.find("img.close"),
              f = c.siblings("#mini_codepad, .mini_codepad");
          c.hasClass("open")
              ? (c.removeClass("open"),
                e.fadeOut("fast", function () {
                    f.slideUp(function () {
                        d.fadeIn("fast");
                    });
                }),
                symbolab_log("Pad", "CompactPad", "Contract"))
              : (c.addClass("open"),
                d.fadeOut("fast", function () {
                    f.slideDown(function () {
                        e.fadeIn("fast");
                    });
                }),
                symbolab_log("Pad", "CompactPad", "Expand"));
      });
      b.off("click", "#see_all_text").on("click", "#see_all_text", function () {
          $(".nl-padOperators").toggleClass("no-hover");
      });
      $("#see_all_span").on("mouseenter", function () {
          $(".nl-padOperators").removeClass("no-hover");
          $("#most_used_dropdown").scrollTop(0);
      });
      $.data(
          this,
          "timer",
          setTimeout(function () {
              a.setSeeAllDropdownHeight();
          }, 50)
      );
      window.addEventListener("resize", function () {
          a.setSeeAllDropdownHeight();
      });
      b.off("click", ".padSelect").on("click", ".padSelect", function () {
          const c = $(this);
          a.padButtonClick(c);
          c.parent().addClass("no-hover");
          setTimeout(function () {
              c.parent().removeClass("no-hover");
          }, 500);
      });
      b.off("click", "#toggle-pad").on("click", "#toggle-pad", function () {
          const c = $("#all-pads").toggleClass("on").hasClass("on");
          $("#toggle-pad").toggleClass("on", c);
          c ? ($("#all-pads").mathquill("redraw"), $("#main-input").focus(), symbolab_log("General", "Open Pad"), a.setSeeAllDropdownHeight()) : symbolab_log("General", "Close Pad");
      });
      b.off("click", "#main-input").on("click", "#main-input", function (c) {
          0 < $(c.originalEvent.target).parents("#toggle-pad").length ||
              $("#all-pads").hasClass("on") ||
              ($("#all-pads").toggleClass("on"), $("#toggle-pad").toggleClass("on"), $("#all-pads").mathquill("redraw"), a.setSeeAllDropdownHeight(), symbolab_log("General", "Open Pad"));
      });
      b.off("focus.mathquill", "#main-input.mathquill-editable").on("focus.mathquill", "#main-input.mathquill-editable", function () {
          a.inputGotFocus();
      });
      b.off("click", ".toggle-full-pad svg").on("click", ".toggle-full-pad svg", (c) => this.toggleFullPad());
  },
  inputGotFocus: function () {
      const a = $("#all-pads");
      a.hasClass("on") || (a.toggleClass("on"), $("#toggle-pad").toggleClass("on"), a.mathquill("redraw"), this.setSeeAllDropdownHeight(), symbolab_log("General", "Open Pad"));
  },
  toggleFullPad: function () {
      $(".codepad-container").toggle();
      $("#widgetPad").toggleClass("hide");
      var a = $(".toggle-full-pad svg use").attr("href");
      $("#all-pads").mathquill("redraw");
      a = "#toggle-full-keypad" === a ? "#toggle-full-keypad-open" : "#toggle-full-keypad";
      $(".toggle-full-pad svg use").attr("href", a);
      this.setSeeAllDropdownHeight();
      "#toggle-full-keypad" === a
          ? ($("#Compact").show(), symbolab_log("Solutions", "switch", "compact pad"))
          : (symbolab_log("Solutions", "switch", "full pad"), (a = $('[class^="pad-toolbar-"].active').attr("class").split(" ")[0].split("-")[2].capitalize()), symbolab_log("Pad", "KeyboardType", a));
  },
  setSeeAllDropdownHeight: function () {
      if (0 < $("#see_all_text").length) {
          let a = $(window).height() - $("#see_all_text").offset().top - $("#see_all_text").outerHeight() + $(window).scrollTop() - 20;
          $("#most_used_dropdown").css("max-height", a + "px");
      }
  },
  sortSelect: function (a) {
      var b = a.val(),
          c = a.find("option").sort(function (d, e) {
              return 0 == d.index
                  ? -1
                  : 0 == e.index
                  ? 1
                  : d.text.localeCompare(e.text, this.language, {
                        sensitivity: "base",
                    });
          });
      a.html(c).val(b);
  },
  appendButtonAndGetLogInfo: function (a) {
      a = $(a);
      var b = a.parents("table:first"),
          c = a.data("function"),
          d = b.attr("id");
      a.data("clear") && Application_toolbar_functions.Basic.clear();
      if ("undefined" != typeof c) {
          var e = c;
          Application_toolbar_functions[d][c](symbolab, b, a);
      } else
          "undefined" != typeof a.data("append")
              ? ((e = a.data("append")), Application_toolbar_functions.Basic.append(b, a))
              : "undefined" != typeof a.data("prepend")
              ? ((e = a.data("prepend")), Application_toolbar_functions.Basic.prepend(b, a))
              : (e = $("#chemistryTable").is(":visible") ? "Chemistry" : $(".matrixTable").is(":visible") ? "Matrix" : a.attr("id"));
      return [e, d];
  },
  padButtonClick: function (a) {
      var b = this.appendButtonAndGetLogInfo(a);
      a = b[0];
      b = b[1];
      "/" != window.location.pathname ? symbolab_log("Pad", b, a) : symbolab_log("MainPagePad", b, a);
      this.inputBox(!1).focus();
      return !1;
  },
  switchPad: function (a) {
      var b = a.attr("class").split(" ")[0].split("-")[2].capitalize(),
          c = KEYPAD.selectChild("#" + b);
      KEYPAD.selectChild("table.buttons:not(.nohide)").hide();
      "Chemistry" == b || "Calculator" == b ? KEYPAD.selectChild("#Common.buttons").hide() : KEYPAD.selectChild("#Common.buttons").show();
      c.show();
      KEYPAD.selectChild('[class^="pad-toolbar-"]').removeClass("active");
      a.addClass("active");
      KEYPAD.currentToolbar = b;
      KEYPAD.showAllButtons();
      $(".button-container .mathquill-embedded-latex").mathquill("redraw");
  },
  inputValue: function (a) {
      a = this.inputBox(a).mathquill("latex");
      return this.cleanSearchPhrase(a);
  },
  cleanSearchPhrase: function (a) {
      void 0 != a && ((a = a.replace(/\\:/g, " ")), (a = a.replace(/(\^\{(.*?)\}|\^(.))/g, "^{$2$3}")), (a = a.replace(/(_\{(.*?)\}|_(.))/g, "_{$2$3}")));
      return a;
  },
  initateSearch: function () {
      var a = this;
      if (!a.searching && (void 0 === this.allowsSearching || this.allowsSearching)) {
          var b = this.inputValue(!0);
          if ("" != b)
              if ((searchInitiatedLog(b), $("table#Calculator").is(":visible")))
                  (this.searching = !0),
                      (b = $(".radBtn").hasClass("active")),
                      $.ajax({
                          type: "GET",
                          url: "/getsolution",
                          data: { query: KEYPAD.inputValue(), isRad: b },
                          success: function (c) {
                              KEYPAD.replaceInput(c.response);
                          },
                          complete: function () {
                              a.searching = !1;
                          },
                      });
              else {
                  let c = "input";
                  APP.forwardSearch(b, c, !0);
              }
      }
  },
  appendInput: function (a, b) {
      if ("undefined" != typeof a) {
          "undefined" == typeof b && (b = 0);
          var c = this.inputBox(!1).focus();
          c.mathquill("write", a + "", b).focus();
          "undefined" != typeof SYSUGGEST && void 0 != SYSUGGEST && 0 == $("table#Calculator").is(":visible") && SYSUGGEST.updateSuggestions(this.inputValue());
          "undefined" != typeof SYGRAPH && SYGRAPH && (SYGRAPH.updateGraphInputOverflow(c, !0), SYGRAPH.getJsonAndDraw(), (SYGRAPH.unchangedSinceLoad = !1));
          this.triggerOnKeyUpEvents && $(c).keyup();
      }
  },
  replaceInput: function (a) {
      a = prepareQueryForMathQuill(a);
      this.inputBox(!1).mathquill("latex", a);
  },
  inputFromSuggest() {
      this.suggestedQuery = this.inputValue(!0);
  },
  selectChild: function (a) {
      return $(a);
  },
  showCommonButtons: function () {
      this.selectChild(".codepadbody .buttons:not(.hide) tr").hide();
      this.selectChild(".codepadbody .buttons:not(.hide) tr:first").show();
      this.selectChild("#Basic").hide();
  },
  showAllButtons: function () {
      this.selectChild(".codepadbody .buttons:not(.hide) tr").show();
  },
  inputBox: function (a) {
      return void 0 !== this.customInputboxSelector && $(this.customInputboxSelector).is(":visible")
          ? $(this.customInputboxSelector)
          : a
          ? $("#main-input")
          : null != this.activeInputBox
          ? this.activeInputBox
          : this.selectChild(".mathquill-editable:first");
  },
  inputBoxIndex: function () {
      var a = this.inputBox(!1);
      return $(".graph-input").index(a);
  },
  createChemistryPad: function (a) {
      var b = this;
      a = $(a);
      if (a.is(":empty")) {
          for (var c = "<tbody>", d = 0; d < this.periodicTable.length; d++) {
              c += "<tr>";
              for (var e = this.periodicTable[d], f = 0; f < e.length; f++)
                  c = e[f] ? c + ("<td class='atomInTable' title='" + b.elementNames[e[f]] + "'><span class='mathquill-embedded-latex'>\\mathrm{" + e[f] + "}</span></td>") : c + "<td class='noAtomInTable'></td>";
              c += "</tr>";
          }
          a.append(c + "</tbody>");
          a.find(".mathquill-embedded-latex").mathquill();
          $(".atomInTable").click(function () {
              var g = $(this).find(".mathquill-embedded-latex").mathquill("latex"),
                  h = 0;
              0 < g.indexOf("_") ? ((g = "_"), (h = 1)) : ((g = g.replace("\\mathrm{", "")), (g = g.replace("}", "")));
              b.inputBox(!1).mathquill("write", g, h);
              b.inputBox(!1).focus();
              symbolab_log("Pad", "Chemistry", g);
          });
      }
      $(".solution-codepad-header span").html("\u00ab " + i18n("compact pad"));
      $("#Compact").hide();
      a.show();
      a.find(".mathquill-embedded-latex").mathquill("redraw");
  },
  createCalculatorPad: function (a) {
      var b = this;
      a = $(a);
      if (a.is(":empty")) {
          for (var c = "<tbody>", d = 0; d < this.periodicTable.length; d++) {
              c += "<tr>";
              for (var e = this.periodicTable[d], f = 0; f < e.length; f++)
                  c = e[f] ? c + ("<td class='atomInTable' title='" + b.elementNames[e[f]] + "'><span class='mathquill-embedded-latex'>\\mathrm{" + e[f] + "}</span></td>") : c + "<td class='noAtomInTable'></td>";
              c += "</tr>";
          }
          a.append(c + "</tbody>");
          a.find(".mathquill-embedded-latex").mathquill();
          $(".atomInTable").click(function () {
              var g = $(this).find(".mathquill-embedded-latex").mathquill("latex"),
                  h = 0;
              0 < g.indexOf("_") ? ((g = "_"), (h = 1)) : ((g = g.replace("\\mathrm{", "")), (g = g.replace("}", "")));
              b.inputBox(!1).mathquill("write", g, h);
              b.inputBox(!1).focus();
              symbolab_log("Pad", "Chemistry", g);
          });
      }
      $(".solution-codepad-header span").html("\u00ab " + i18n("compact pad"));
      $("#Compact").hide();
      a.show();
      a.find(".mathquill-embedded-latex").mathquill("redraw");
  },
};
var ApplicationEquationSuggest = function () {
  this.init();
};
ApplicationEquationSuggest.prototype = {
  init: function () {
      var a = this;
      $("#main-input").keyup(function (b) {
          if (37 == b.keyCode || 39 == b.keyCode || $("table#Calculator").is(":visible")) return !1;
          if (38 == b.keyCode) $("#CodePadSuggestions").is(":visible") && a.moveSuggestion(-1);
          else if (8 != b.keyCode && "Calc" == KEYPAD.currentToolbar && 1 == symbolab.lastInsertedIsEquals()) a.updateCalculation();
          else if (40 == b.keyCode) $("#CodePadSuggestions").is(":visible") && a.moveSuggestion(1);
          else if (27 == b.keyCode) a.selectChild("#CodePadSuggestions").hide();
          else {
              var c = KEYPAD.inputValue("latex");
              setTimeout(function () {
                  var d = KEYPAD.inputValue("latex");
                  "" == d ? $("#CodePadSuggestions").hide() : c === d && a.updateSuggestions(d);
              }, 150);
          }
      });
  },
  moveSuggestion: function (a) {
      var b,
          c = $("#CodePadSuggestions li.active");
      (0 > a && 0 == c.length) || (0 == c.length ? (b = $("#CodePadSuggestions li:first")) : 1 == a ? (b = c.next()) : -1 == a && (b = c.prev()), 0 != b.length && (this.highlightSuggestion(c, b, !0), KEYPAD.inputBox().focus()));
  },
  highlightSuggestion: function (a, b, c) {
      a && a.removeClass("active");
      b.addClass("active");
      c && (KEYPAD.replaceInput(b.attr("title")), KEYPAD.inputFromSuggest());
  },
  clearSuggestions: function (a) {
      a = $("#CodePadSuggestions");
      a.find("li").remove();
      a.hide();
  },
  updateSuggestions: function (a) {
      if (!this.updatingSuggestions && !this.disable_suggestions) {
          this.updatingSuggestions = !0;
          var b = this,
              c = $("#CodePadSuggestions");
          $.ajax({
              type: "GET",
              url: "/suggest",
              data: {
                  userId: APP.params.userId,
                  connected: APP.params.connected,
                  language: APP.params.language,
                  query: a,
              },
              error: function (d) {
                  b.updatingSuggestions = !1;
                  c.hide();
              },
              success: function (d) {
                  b.clearSuggestions();
                  if (void 0 == d || 0 == d.length) c.hide(), (b.updatingSuggestions = !1);
                  else {
                      for (var e in d) b.addSuggestion(d[e].display);
                      c.show();
                      b.updatingSuggestions = !1;
                      c.find(".mathquill-embedded-latex:not(.mathquill-rendered-math)").mathquill();
                      c.find("li").hover(function (f) {
                          var g = $("#CodePadSuggestions li.active");
                          f = $(f.currentTarget);
                          b.highlightSuggestion(g, f, !1);
                      });
                      c.find("li").click(function (f) {
                          var g = c.find("li.active");
                          f = $(f.currentTarget);
                          b.highlightSuggestion(g, f, !0);
                          "undefined" != typeof widget && 1 == widget ? makeWidgetSearch() : ((g = KEYPAD.inputValue("latex")), APP.forwardSearch(g, "sug", !1));
                      });
                  }
              },
          });
      }
  },
  addSuggestion: function (a) {
      a = prepareQueryForMathQuill(a);
      $("#CodePadSuggestions").append('<li title="' + a + '"><div class="mathquill-embedded-latex"">' + a + "</div></li>");
  },
};
var currentElementNumber = 2;
const elements = [
  {
      id: "notebooks",
      title: i18n("Notebook"),
      description: i18n("notebooks-description"),
      link: "/notebook",
  },
  {
      id: "physics",
      title: i18n("physics"),
      description: i18n("physics-description"),
      link: "/solver/physics-calculator",
  },
  {
      id: "calculators",
      title: i18n("Calculator Title"),
      description: i18n("calculators-description"),
      link: "/calculators",
  },
  {
      id: "cheat-sheets",
      title: i18n("Cheat Sheets"),
      description: i18n("cheat-sheets-description"),
      link: "/cheat-sheets",
  },
  {
      id: "groups",
      title: i18n("Groups"),
      description: i18n("groups-description"),
      link: "/groups",
  },
];
function setupExploreMore() {
  var a = $("#homepage-explore-third-bar svg use").attr("href");
  for (let b = 0; b < elements.length; b++) -1 !== a.indexOf(elements[b].id) && (currentElementNumber = b);
  a = $("body");
  a.off("click", "#homepage-explore-arrow-left").on("click", "#homepage-explore-arrow-left", function () {
      replaceElements(!1);
  });
  a.off("click", "#homepage-explore-arrow-right").on("click", "#homepage-explore-arrow-right", function () {
      replaceElements(!0);
  });
  a.off("click", "#homepage-practice-button").on("click", "#homepage-practice-button", function (b) {
      b.preventDefault();
      var c = $(this).attr("href");
      $.when(symbolab_log("General", "TryItNowButton", c)).always(function () {
          window.location = c;
      });
  });
  a.off("click", ".homepage-center a, #homepage-practice-img").on("click", ".homepage-center a, #homepage-practice-img", function () {
      getLocalStorage().setItem("linkOrigin", "HomePageVideo");
  });
  a.off("click", "#homepage-explore-third-bar").on("click", "#homepage-explore-third-bar", function (b) {
      b.preventDefault();
      let c = $(this).attr("href");
      $.when(symbolab_log("General", "Carousel", c)).always(function () {
          window.location = c;
      });
  });
  $("#popular-calculators-links a").click(function (b) {
      b.preventDefault();
      var c = $(this).attr("href");
      $.when(symbolab_log("General", "Popular Calculator", c)).always(function () {
          window.location = c;
      });
  });
}
function replaceElements(a) {
  currentElementNumber = (currentElementNumber + (a ? 1 : -1)) % elements.length;
  a = elements[currentElementNumber];
  i18n(a.title);
  $("#homepage-explore-body-headline").text(a.title);
  $("#homepage-explore-body-text").text(a.description);
  2 > currentElementNumber && (currentElementNumber += 5);
  $("#homepage-explore-first-bar svg use").attr("href", "#explore-" + elements[(currentElementNumber - 2) % elements.length].id);
  $("#homepage-explore-second-bar svg use").attr("href", "#explore-" + elements[(currentElementNumber - 1) % elements.length].id);
  $("#homepage-explore-third-bar svg use").attr("href", "#explore-" + elements[currentElementNumber % elements.length].id);
  $("#homepage-explore-fourth-bar svg use").attr("href", "#explore-" + elements[(currentElementNumber + 1) % elements.length].id);
  $("#homepage-explore-fifth-bar svg use").attr("href", "#explore-" + elements[(currentElementNumber + 2) % elements.length].id);
  $("#homepage-explore").html($("#homepage-explore").html());
  $("#homepage-explore-third-bar").attr("href", elements[currentElementNumber % elements.length].link);
}
function setupInstantCalculators() {
  $("#calculators a").on("click", function () {
      getLocalStorage().setItem("linkOrigin", "HomePage");
  });
}
